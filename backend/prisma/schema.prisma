generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  name            String?
  password        String
  points          Int              @default(0)
  carbonFootprint CarbonFootprint?
  chatSessions    ChatSession[]
  badges          UserBadge[]
  completedTips   UserEcoTip[]
  quizzes         UserQuiz[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CarbonFootprint {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  transport Float
  energy    Float
  diet      Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  history   ChatHistory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatHistory {
  id        Int      @id @default(autoincrement())
  session   ChatSession @relation(fields: [sessionId], references: [id])
  sessionId Int
  message   String
  response  String
  createdAt DateTime @default(now())
}

model EcoTip {
  id            Int          @id @default(autoincrement())
  tip           String
  category      String
  completedBy   UserEcoTip[]
  createdAt     DateTime     @default(now())
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  icon        String
  points      Int
  users       UserBadge[]
  createdAt   DateTime    @default(now())
}

model UserBadge {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  badge     Badge    @relation(fields: [badgeId], references: [id])
  badgeId   Int
  createdAt DateTime @default(now())

  @@id([userId, badgeId])
}

model UserEcoTip {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  ecoTip    EcoTip   @relation(fields: [ecoTipId], references: [id])
  ecoTipId  Int
  createdAt DateTime @default(now())

  @@id([userId, ecoTipId])
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  questions   Question[]
  completedBy UserQuiz[]
  createdAt   DateTime   @default(now())
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  answers   Answer[]
  createdAt DateTime @default(now())
}

model Answer {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
}

model UserQuiz {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  score     Int
  createdAt DateTime @default(now())

  @@id([userId, quizId])
}
